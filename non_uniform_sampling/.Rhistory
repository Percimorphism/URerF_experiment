num_of_points=3*N
plot3d(data[1:(num_of_points/3),1], data[1:(num_of_points/3),2], data[1:(num_of_points/3),3], col='red', size=3, xlim = c(-r-1,r+1), ylim=c(-r-1,r+1), zlim = c(-r-1, r+1))
plot3d(data[(num_of_points/3+1):(2*num_of_points/3),1], data[(num_of_points/3+1):(2*num_of_points/3),2], data[(num_of_points/3+1):(2*num_of_points/3),3], col='green', size=3, add=TRUE)
plot3d(data[(2*num_of_points/3+1):(num_of_points),1], data[(2*num_of_points/3+1):(num_of_points),2], data[(2*num_of_points/3+1):(num_of_points),3], col='orange', size=3, add=TRUE)
r=3
N=100
set.seed(1)
data=c()
parameters=c()
u=(rnorm(N, mean = pi/6, sd = 0.01))
v=(rnorm(N, mean = pi/7, sd = 0.01))
u_v=t(rbind(u,v))
parameters=rbind(parameters, u_v)
u=(rnorm(N, mean = pi/3, sd = 0.01))
v=(rnorm(N, mean = pi/4, sd = 0.01))
u_v=t(rbind(u,v))
parameters=rbind(parameters, u_v)
u=(rnorm(N, mean = pi/11, sd = 0.01))
v=(rnorm(N, mean = pi/13, sd = 0.01))
u_v=t(rbind(u,v))
parameters=rbind(parameters, u_v)
rownames(parameters) <- c()
colnames(parameters) <- c()
dim(parameters)
data=c()
row=1
while (row<=dim(parameters)[1]){
x = r*cos(parameters[row, 1])*sin(parameters[row,2])
y = r*sin(parameters[row, 1])*sin(parameters[row,2])
z = r*cos(parameters[row,2])
data1=cbind(cbind(x,y), z)
data=rbind(data, data1)
row=row+1
}
num_of_points=3*N
plot3d(data[1:(num_of_points/3),1], data[1:(num_of_points/3),2], data[1:(num_of_points/3),3], col='red', size=3, xlim = c(-r-1,r+1), ylim=c(-r-1,r+1), zlim = c(-r-1, r+1))
plot3d(data[(num_of_points/3+1):(2*num_of_points/3),1], data[(num_of_points/3+1):(2*num_of_points/3),2], data[(num_of_points/3+1):(2*num_of_points/3),3], col='green', size=3, add=TRUE)
plot3d(data[(2*num_of_points/3+1):(num_of_points),1], data[(2*num_of_points/3+1):(num_of_points),2], data[(2*num_of_points/3+1):(num_of_points),3], col='orange', size=3, add=TRUE)
r=3
N=100
set.seed(1)
data=c()
parameters=c()
u=(rnorm(N, mean = pi/6, sd = 0.1))
v=(rnorm(N, mean = pi/7, sd = 0.1))
u_v=t(rbind(u,v))
parameters=rbind(parameters, u_v)
u=(rnorm(N, mean = pi/3, sd = 0.1))
v=(rnorm(N, mean = pi/4, sd = 0.1))
u_v=t(rbind(u,v))
parameters=rbind(parameters, u_v)
u=(rnorm(N, mean = pi/11, sd = 0.1))
v=(rnorm(N, mean = pi/13, sd = 0.1))
u_v=t(rbind(u,v))
parameters=rbind(parameters, u_v)
rownames(parameters) <- c()
colnames(parameters) <- c()
data=c()
row=1
while (row<=dim(parameters)[1]){
x = r*cos(parameters[row, 1])*sin(parameters[row,2])
y = r*sin(parameters[row, 1])*sin(parameters[row,2])
z = r*cos(parameters[row,2])
data1=cbind(cbind(x,y), z)
data=rbind(data, data1)
row=row+1
}
num_of_points=3*N
plot3d(data[1:(num_of_points/3),1], data[1:(num_of_points/3),2], data[1:(num_of_points/3),3], col='red', size=3, xlim = c(-r-1,r+1), ylim=c(-r-1,r+1), zlim = c(-r-1, r+1))
plot3d(data[(num_of_points/3+1):(2*num_of_points/3),1], data[(num_of_points/3+1):(2*num_of_points/3),2], data[(num_of_points/3+1):(2*num_of_points/3),3], col='green', size=3, add=TRUE)
plot3d(data[(2*num_of_points/3+1):(num_of_points),1], data[(2*num_of_points/3+1):(num_of_points),2], data[(2*num_of_points/3+1):(num_of_points),3], col='orange', size=3, add=TRUE)
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_function.R')
#sphere no noise simulation
source("sphere_function.R")
source("precision_recall.R")
library(stats)
library(MASS)
library(Matrix)
library(scatterplot3d)
library(rerf)
library(vegan)
library(umap)
num_of_points=200
sphere_data_object=non_uniform_sampleing_upper_sphere(N=num_of_points)
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_function.R')
# sphere no noise simulation
# this is no longer uniform sampling from a sphere
# sampling 3 patches on the surface and see how that works
source("sphere_function.R")
source("precision_recall.R")
library(stats)
library(MASS)
library(Matrix)
library(scatterplot3d)
library(rerf)
library(vegan)
library(umap)
N=200
num_of_points=3*N
sphere_data_object=non_uniform_sampleing_upper_sphere(N=N)
sphere_data=sphere_data_object[[1]]
parameters=sphere_data_object[[2]]
# sphere no noise simulation
# this is no longer uniform sampling from a sphere
# sampling 3 patches on the surface and see how that works
source("sphere_function.R")
source("precision_recall.R")
# sphere no noise simulation
# this is no longer uniform sampling from a sphere
# sampling 4 patches on the surface and see how that works
source("sphere_function.R")
source("precision_recall.R")
library(stats)
library(MASS)
library(Matrix)
library(scatterplot3d)
library(rerf)
library(vegan)
library(umap)
N=200
num_of_points=4*N
sphere_data_object=non_uniform_sampleing_upper_sphere(N=N)
sphere_data=sphere_data_object[[1]]
# sphere no noise simulation
# this is no longer uniform sampling from a sphere
# sampling 4 patches on the surface and see how that works
source("sphere_function.R")
source("precision_recall.R")
library(stats)
library(MASS)
library(Matrix)
library(scatterplot3d)
library(rerf)
library(vegan)
library(umap)
N=200
num_of_points=4*N
sphere_data_object=non_uniform_sampleing_upper_sphere(N=N)
sphere_data=sphere_data_object[[1]]
# sphere no noise simulation
# this is no longer uniform sampling from a sphere
# sampling 4 patches on the surface and see how that works
source("sphere_function.R")
source("precision_recall.R")
library(stats)
library(MASS)
library(Matrix)
library(scatterplot3d)
library(rerf)
library(vegan)
library(umap)
N=200
num_of_points=4*N
sphere_data_object=non_uniform_sampleing_upper_sphere(N=N)
sphere_data=sphere_data_object[[1]]
# sphere no noise simulation
# this is no longer uniform sampling from a sphere
# sampling 4 patches on the surface and see how that works
source("sphere_function.R")
source("precision_recall.R")
library(stats)
library(MASS)
library(Matrix)
library(scatterplot3d)
library(rerf)
library(vegan)
library(umap)
N=200
num_of_points=4*N
sphere_data_object=non_uniform_sampleing_upper_sphere(N=N)
sphere_data=sphere_data_object[[1]]
# sphere no noise simulation
# this is no longer uniform sampling from a sphere
# sampling 4 patches on the surface and see how that works
source("sphere_function.R")
source("precision_recall.R")
library(stats)
library(MASS)
library(Matrix)
library(scatterplot3d)
library(rerf)
library(vegan)
library(umap)
N=200
num_of_points=4*N
sphere_data_object=non_uniform_sampleing_upper_sphere(N=N)
sphere_data=sphere_data_object[[1]]
# sphere no noise simulation
# this is no longer uniform sampling from a sphere
# sampling 4 patches on the surface and see how that works
source("sphere_function.R")
source("precision_recall.R")
library(stats)
library(MASS)
library(Matrix)
library(scatterplot3d)
library(rerf)
library(vegan)
library(umap)
N=200
num_of_points=4*N
sphere_data_object=non_uniform_sampleing_upper_sphere(N=N)
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
iso_dist = as.matrix(isomapdist(D_eucd, k=599))
iso_dist = as.matrix(isomapdist(D_eucd, k=500))
iso_dist = as.matrix(isomapdist(D_eucd, k=100))
iso_dist = as.matrix(isomapdist(D_eucd, k=200))
iso_dist = as.matrix(isomapdist(D_eucd, k=150))
iso_dist = as.matrix(isomapdist(D_eucd, k=170))
iso_dist = as.matrix(isomapdist(D_eucd, k=190))
iso_dist = as.matrix(isomapdist(D_eucd, k=195))
iso_dist = as.matrix(isomapdist(D_eucd, k=199))
iso_dist = as.matrix(isomapdist(D_eucd, k=200))
#UMAP
custom.settings = umap.defaults
custom.settings$n_neighbors=num_of_points
a = umap(sphere_data, config = custom.settings)
D_umap=as.matrix(dist(a$layout))
############################################################################
#now we do normalized
norm_sphere_data=normalizeData(sphere_data)
#URerF norm
g_norm=Urerf(norm_sphere_data, trees = 300, Progress = TRUE, splitCrit = "bicfast", normalizeData = FALSE)
W_norm=g_norm$similarityMatrix
D_rf_norm=1-W_norm
# isomap norm
D_eucd_norm = as.matrix(dist(norm_sphere_data))
iso_dist_norm = as.matrix(isomapdist(D_eucd_norm, k=200))
#UMAP norm
a_norm = umap(norm_sphere_data, config = custom.settings)
D_umap_norm=as.matrix(dist(a_norm$layout))
at_K=seq(1, 100, 5)
#########################actually generate the p-r list#################################
D_rf_p_r_list = p_r_list(D_rf, D_truth, at_K, num_of_points)
D_rf_precision_list= D_rf_p_r_list$precisionList
#####################################################################################
D_iso_p_r_list = p_r_list(iso_dist, D_truth, at_K, num_of_points)
D_iso_precision_list= D_iso_p_r_list$precisionList
####################################################################
D_umap_p_r_list = p_r_list(D_umap, D_truth, at_K, num_of_points)
D_umap_precision_list= D_umap_p_r_list$precisionList
######normalized p################
#########################actually generate the p-r list#################################
D_rf_norm_p_r_list = p_r_list(D_rf_norm, D_truth, at_K, num_of_points)
D_rf_norm_precision_list= D_rf_norm_p_r_list$precisionList
#####################################################################################
D_iso_norm_p_r_list = p_r_list(iso_dist_norm, D_truth, at_K, num_of_points)
D_iso_norm_precision_list= D_iso_norm_p_r_list$precisionList
####################################################################
D_umap_norm_p_r_list = p_r_list(D_umap_norm, D_truth, at_K, num_of_points)
D_umap_norm_precision_list= D_umap_p_r_list$precisionList
save(D_rf_precision_list, D_rf_norm_precision_list,
D_iso_precision_list, D_iso_norm_precision_list,
D_umap_precision_list, D_umap_norm_precision_list,
at_K, file="sphere_no_noise_precision_list.Rdata")
library(ggplot2)
library(gtable)
library(grid)
library(gridExtra)
load("sphere_no_noise_precision_list.Rdata")
precision_df1=data.frame(at_K, prec=D_rf_precision_list, Algo = as.factor("URerF"), Norm =as.factor("no normalization"))
precision_df2=data.frame(at_K, prec=D_iso_precision_list, Algo = as.factor("Isomap"), Norm =as.factor("no normalization"))
precision_df3=data.frame(at_K, prec=D_umap_precision_list, Algo = as.factor("umap"), Norm =as.factor("no normalization"))
precision_df4=data.frame(at_K, prec=D_rf_norm_precision_list, Algo = as.factor("URerF"), Norm =as.factor("normalization"))
precision_df5=data.frame(at_K, prec=D_iso_norm_precision_list, Algo = as.factor("Isomap"), Norm =as.factor("normalization"))
precision_df6=data.frame(at_K, prec=D_umap_norm_precision_list, Algo = as.factor("umap"), Norm =as.factor("no normalization"))
precision_df=rbind(precision_df1, precision_df2, precision_df3, precision_df4, precision_df5, precision_df6)
p <- ggplot(precision_df, aes(at_K, prec, colour = Algo, shape = Norm)) + geom_line(alpha=0.9, show.legend = TRUE) + geom_point(alpha=0.9, show.legend = TRUE)  + xlab('@K') + ylab('Precision/Recall') + scale_color_brewer(palette="Dark2")
plot(p)
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_ggplot_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_ggplot_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
iso_dist = as.matrix(isomapdist(D_eucd, k=2))
iso_dist = as.matrix(isomapdist(D_eucd, k=3))
iso_dist = as.matrix(isomapdist(D_eucd, k=4))
save(D_rf_precision_list,
D_iso_precision_list,
D_umap_precision_list,
at_K, file="sphere_no_noise_precision_list.Rdata")
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_ggplot_no_noise.R')
#non_normalize vs normalize (without noise)
#first we do non_normalized
#URerF
g=Urerf(sphere_data, trees = 300, Progress = TRUE, splitCrit = "bicfast", normalizeData = FALSE, min.parent = 5)
W=g$similarityMatrix
D_rf=1-W
#########################actually generate the p-r list#################################
D_rf_p_r_list = p_r_list(D_rf, D_truth, at_K, num_of_points)
D_rf_precision_list= D_rf_p_r_list$precisionList
#####################################################################################
D_iso_p_r_list = p_r_list(iso_dist, D_truth, at_K, num_of_points)
D_iso_precision_list= D_iso_p_r_list$precisionList
####################################################################
D_umap_p_r_list = p_r_list(D_umap, D_truth, at_K, num_of_points)
D_umap_precision_list= D_umap_p_r_list$precisionList
save(D_rf_precision_list,
D_iso_precision_list,
D_umap_precision_list,
at_K, file="sphere_no_noise_precision_list.Rdata")
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_ggplot_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_ggplot_no_noise.R')
#non_normalize vs normalize (without noise)
#first we do non_normalized
#URerF
g=Urerf(sphere_data, trees = 300, Progress = TRUE, splitCrit = "bicfast", normalizeData = FALSE, min.parent = 10)
W=g$similarityMatrix
D_rf=1-W
#########################actually generate the p-r list#################################
D_rf_p_r_list = p_r_list(D_rf, D_truth, at_K, num_of_points)
D_rf_precision_list= D_rf_p_r_list$precisionList
save(D_rf_precision_list,
D_iso_precision_list,
D_umap_precision_list,
at_K, file="sphere_no_noise_precision_list.Rdata")
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_ggplot_no_noise.R')
sqrt(800)
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_ggplot_no_noise.R')
#non_normalize vs normalize (without noise)
#first we do non_normalized
#URerF
g=Urerf(sphere_data, trees = 300, Progress = TRUE, splitCrit = "bicfast", normalizeData = FALSE, min.parent = 5)
W=g$similarityMatrix
D_rf=1-W
#########################actually generate the p-r list#################################
D_rf_p_r_list = p_r_list(D_rf, D_truth, at_K, num_of_points)
D_rf_precision_list= D_rf_p_r_list$precisionList
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_ggplot_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
# sphere no noise simulation
# this is no longer uniform sampling from a sphere
# sampling 4 patches on the surface and see how that works
source("sphere_function.R")
source("precision_recall.R")
library(stats)
library(MASS)
library(Matrix)
library(scatterplot3d)
library(rerf)
library(vegan)
library(umap)
N=200
num_of_points=4*N
sphere_data_object=non_uniform_sampleing_upper_sphere(N=N)
r=3
N=200
set.seed(1)
data=c()
parameters=c()
u=(rnorm(N, mean = pi/6, sd = 0.1))
v=(rnorm(N, mean = pi/7, sd = 0.1))
u_v=t(rbind(u,v))
parameters=rbind(parameters, u_v)
u=(rnorm(N, mean = pi/3, sd = 0.1))
v=(rnorm(N, mean = pi/4, sd = 0.1))
u_v=t(rbind(u,v))
parameters=rbind(parameters, u_v)
u=(rnorm(N, mean = 2*pi, sd = 0.1))
v=(rnorm(N, mean = 3*pi, sd = 0.1))
u_v=t(rbind(u,v))
parameters=rbind(parameters, u_v)
u=(rnorm(N, mean = pi/77, sd = 0.1))
v=(rnorm(N, mean = pi/4, sd = 0.1))
u_v=t(rbind(u,v))
parameters=rbind(parameters, u_v)
rownames(parameters) <- c()
colnames(parameters) <- c()
data=c()
row=1
while (row<=dim(parameters)[1]){
x = r*cos(parameters[row, 1])*sin(parameters[row,2])
y = r*sin(parameters[row, 1])*sin(parameters[row,2])
z = r*cos(parameters[row,2])
data1=cbind(cbind(x,y), z)
data=rbind(data, data1)
row=row+1
}
num_of_points=4*N
plot3d(data[1:(num_of_points/4),1], data[1:(num_of_points/4),2], data[1:(num_of_points/4),3], col='red', size=3, xlim = c(-r-1,r+1), ylim=c(-r-1,r+1), zlim = c(-r-1, r+1))
plot3d(data[(num_of_points/4+1):(2*num_of_points/4),1], data[(num_of_points/4+1):(2*num_of_points/4),2], data[(num_of_points/4+1):(2*num_of_points/4),3], col='green', size=3, add=TRUE)
plot3d(data[(2*num_of_points/4+1):(3*num_of_points/4),1], data[(2*num_of_points/4+1):(3*num_of_points/4),2], data[(2*num_of_points/4+1):(3*num_of_points/4),3], col='orange', size=3, add=TRUE)
plot3d(data[(3*num_of_points/4+1):(num_of_points),1], data[(3*num_of_points/4+1):(num_of_points),2], data[(3*num_of_points/4+1):(num_of_points),3], col='blue', size=3, add=TRUE)
# sphere no noise simulation
# this is no longer uniform sampling from a sphere
# sampling 4 patches on the surface and see how that works
source("sphere_function.R")
source("precision_recall.R")
library(stats)
library(MASS)
library(Matrix)
library(scatterplot3d)
library(rerf)
library(vegan)
library(umap)
N=200
num_of_points=4*N
sphere_data_object=non_uniform_sampleing_upper_sphere(N=N)
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
iso_dist = as.matrix(isomapdist(D_eucd, k=100))
iso_dist = as.matrix(isomapdist(D_eucd, k=200))
#UMAP
custom.settings = umap.defaults
custom.settings$n_neighbors=num_of_points
a = umap(sphere_data, config = custom.settings)
D_umap=as.matrix(dist(a$layout))
at_K=seq(1, 100, 5)
#########################actually generate the p-r list#################################
D_rf_p_r_list = p_r_list(D_rf, D_truth, at_K, num_of_points)
D_rf_precision_list= D_rf_p_r_list$precisionList
#####################################################################################
D_iso_p_r_list = p_r_list(iso_dist, D_truth, at_K, num_of_points)
D_iso_precision_list= D_iso_p_r_list$precisionList
####################################################################
D_umap_p_r_list = p_r_list(D_umap, D_truth, at_K, num_of_points)
D_umap_precision_list= D_umap_p_r_list$precisionList
save(D_rf_precision_list,
D_iso_precision_list,
D_umap_precision_list,
at_K, file="sphere_no_noise_precision_list.Rdata")
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_ggplot_no_noise.R')
setwd("~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling")
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_ggplot_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_function.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_ggplot_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_ggplot_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_function.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_function.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_function.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
D_rf_precision_list
D_iso_precision_list
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_function.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_ggplot_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_function.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_ggplot_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_function.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
iso_dist = as.matrix(isomapdist(D_eucd, k=50))
iso_dist = as.matrix(isomapdist(D_eucd, k=100))
#UMAP
custom.settings = umap.defaults
custom.settings$n_neighbors=num_of_points
a = umap(sphere_data, config = custom.settings)
D_umap=as.matrix(dist(a$layout))
at_K=seq(1, 100, 5)
#########################actually generate the p-r list#################################
D_rf_p_r_list = p_r_list(D_rf, data_label, at_K, num_of_points)
D_rf_precision_list= D_rf_p_r_list$precisionList
#####################################################################################
D_iso_p_r_list = p_r_list(iso_dist, data_label, at_K, num_of_points)
D_iso_precision_list= D_iso_p_r_list$precisionList
####################################################################
D_umap_p_r_list = p_r_list(D_umap, data_label, at_K, num_of_points)
D_umap_precision_list= D_umap_p_r_list$precisionList
save(D_rf_precision_list,
D_iso_precision_list,
D_umap_precision_list,
at_K, file="sphere_no_noise_precision_list.Rdata")
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_ggplot_no_noise.R')
#non_normalize vs normalize (without noise)
#first we do non_normalized
#URerF
g=Urerf(sphere_data, trees = 300, Progress = TRUE, splitCrit = "bicfast", normalizeData = FALSE, min.parent = 50)
W=g$similarityMatrix
D_rf=1-W
#########################actually generate the p-r list#################################
D_rf_p_r_list = p_r_list(D_rf, data_label, at_K, num_of_points)
D_rf_precision_list= D_rf_p_r_list$precisionList
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_ggplot_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_ggplot_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_ggplot_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_ggplot_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
#########################actually generate the p-r list#################################
D_rf_p_r_list = p_r_list(D_rf, D_truth, at_K, num_of_points)
D_rf_precision_list= D_rf_p_r_list$precisionList
#####################################################################################
D_iso_p_r_list = p_r_list(iso_dist, D_truth, at_K, num_of_points)
D_iso_precision_list= D_iso_p_r_list$precisionList
####################################################################
D_umap_p_r_list = p_r_list(D_umap, D_truth, at_K, num_of_points)
D_umap_precision_list= D_umap_p_r_list$precisionList
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_ggplot_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_sim_no_noise.R')
source('~/Documents/RESEARCH_AND_SCIENCE/jovo-research/URerF_simulation/non_uniform_sampling/sphere_ggplot_no_noise.R')
sphere_data_object=non_uniform_sampleing_upper_sphere(N=N)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
